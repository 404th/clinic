definitions:
  model.CreateQueueRequest:
    properties:
      customer_id:
        type: string
      recipient_id:
        type: string
    required:
    - customer_id
    - recipient_id
    type: object
  model.CreateRoleRequest:
    properties:
      price:
        type: number
      rolename:
        type: string
    type: object
  model.CreateUserRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      password:
        type: string
      role_id:
        type: string
      surname:
        type: string
      username:
        type: string
    required:
    - email
    - firstname
    - password
    - role_id
    - surname
    - username
    type: object
  model.ErrorResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.GetAllQueuesResponse:
    properties:
      metadata:
        $ref: '#/definitions/model.Metadata'
      queues:
        items:
          $ref: '#/definitions/model.Queue'
        type: array
    type: object
  model.GetAllRolesResponse:
    properties:
      metadata:
        $ref: '#/definitions/model.Metadata'
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
    type: object
  model.GetAllUsersResponse:
    properties:
      metadata:
        $ref: '#/definitions/model.Metadata'
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.IDTracker:
    properties:
      id:
        type: string
    type: object
  model.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.LoginResponse:
    properties:
      access_token:
        type: string
      id:
        type: string
      refresh_token:
        type: string
    type: object
  model.MakePurchaseRequest:
    properties:
      amount:
        type: number
      queue_id:
        type: string
    required:
    - amount
    - queue_id
    type: object
  model.Metadata:
    properties:
      count:
        type: integer
      limit:
        type: integer
      page:
        type: integer
    type: object
  model.Queue:
    properties:
      customer_id:
        type: string
      id:
        type: string
      paid_money:
        type: number
      payment_status:
        type: integer
      queue_number:
        type: integer
      recipient_id:
        type: string
    type: object
  model.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  model.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  model.Role:
    properties:
      active:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      price:
        type: number
      role_name:
        type: string
      updated_at:
        type: string
    type: object
  model.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.TransferMoneyRequest:
    properties:
      id:
        type: string
      value:
        type: number
    required:
    - id
    - value
    type: object
  model.User:
    properties:
      active:
        type: integer
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      password:
        type: string
      role_id:
        type: string
      surname:
        type: string
      updated_at:
        type: string
      username:
        type: string
      wallet:
        type: number
    required:
    - id
    - password
    - role_id
    - username
    type: object
info:
  contact: {}
  description: This is a api gateway for clinic
paths:
  /login:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.LoginResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      summary: login
      tags:
      - user
  /queue:
    get:
      consumes:
      - application/json
      description: get_all_queues
      operationId: get_all_queues
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.GetAllQueuesResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: get_all_queues
      tags:
      - queue
    patch:
      consumes:
      - application/json
      description: make purchase
      operationId: make_purchase
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.MakePurchaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.IDTracker'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: make purchase
      tags:
      - queue
    post:
      consumes:
      - application/json
      description: create queue
      operationId: create_queue
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CreateQueueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.IDTracker'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: create queue
      tags:
      - queue
  /refresh-token:
    put:
      consumes:
      - application/json
      description: refresh-token
      operationId: refresh-token
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.RefreshTokenResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: refresh-token
      tags:
      - user
  /role:
    get:
      consumes:
      - application/json
      description: get_all_roles
      operationId: get_all_roles
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.GetAllRolesResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: get_all_roles
      tags:
      - role
    post:
      consumes:
      - application/json
      description: create role
      operationId: create_role
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.IDTracker'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      summary: create role
      tags:
      - role
  /user:
    get:
      consumes:
      - application/json
      description: get_all_users
      operationId: get_all_users
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.GetAllUsersResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: get_all_users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: create user
      operationId: create_user
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.IDTracker'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      summary: create user
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      description: get_user_by_id
      operationId: get_user_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: get_user_by_id
      tags:
      - user
  /user/transfer:
    patch:
      consumes:
      - application/json
      description: transfer
      operationId: transfer
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.TransferMoneyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: body
          schema:
            allOf:
            - $ref: '#/definitions/model.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.IDTracker'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ErrorResponse'
            - properties:
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: transfer
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
